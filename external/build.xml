<?xml version="1.0"?>

<!--
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-->

<project name="external" default="build" basedir=".">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<description>
		Build external tests
	</description>

	<!-- set properties for this build -->
	<property name="DEST_EXTERNAL" value="${BUILD_ROOT}/external" />
	<property environment="env" />
	<property name="top" location="../" />

	<set-property name="DOCKERIMAGE_TAG_ISSET" if-property-isset="env.DOCKERIMAGE_TAG"/>
	<set-property name="EXTRA_DOCKER_ARGS_ISSET" if-property-isset="env.EXTRA_DOCKER_ARGS"/>
	<if>
		<isset property="DOCKERIMAGE_TAG_ISSET"/>
		<then>
			<property name="dockerImageTag" value="${env.DOCKERIMAGE_TAG}"/>
		</then>
		<else>
			<property name="dockerImageTag" value="nightly"/>
		</else>
	</if>
	<if>
		<isset property="EXTRA_DOCKER_ARGS_ISSET"/>
		<then>
			<property name="extra_docker_args" value="${env.EXTRA_DOCKER_ARGS}"/>
		</then>
		<else>
			<property name="extra_docker_args" value=""/>
		</else>
	</if>

	<target name="init">
		<mkdir dir="${DEST_EXTERNAL}" />
	</target>

	<target name="build" depends="dist,docker_prune">
		<subant target="">
			<property name="dockerImageTag" value="${dockerImageTag}"/>
			<fileset dir="." includes="*/build.xml" />
		</subant>
	</target>

	<target name="dist" depends="init">
		<copy todir="${DEST_EXTERNAL}">
			<fileset dir="." includes="*.mk"/>
		</copy>
	</target>

	<target name="docker_prune" description="Remove all unused images from the machine before running new builds">
		<exec executable="bash">
            <arg value="${DEST_EXTERNAL}/external.sh"/>
			<arg value="--prune"/>
		</exec>
	</target>

	<target name="clean_image"  description="clean test docker image if there is one">
		<echo message="Executing external.sh --clean --dir ${TEST} --tag ${dockerImageTag} --version ${JDK_VERSION} --impl ${JDK_IMPL} " />
		<exec executable="bash">
			<arg value="${DEST_EXTERNAL}/external.sh"/>
			<arg value="--clean"/>
			<arg value="--dir"/>
			<arg value="${TEST}"/>
			<arg value="--tag"/>
			<arg value="${dockerImageTag}"/>
			<arg value="--version"/>
			<arg value="${JDK_VERSION}"/>
			<arg value="--impl"/>
			<arg value="${JDK_IMPL}"/>
		</exec>
	</target>

	<target name="move_scripts" description="move shell scripts to working directory">
		<copy todir="${DEST_EXTERNAL}/${TEST}">
			<fileset dir="${src}/" includes="*.sh, *.properties"/>
		</copy>
		<copy todir="${DEST_EXTERNAL}">
			<fileset dir="${top}" includes="*.sh common.properties"/>
		</copy>
	</target>

	<target name="build_image" description="build test dockerfile">
		<echo message="Executing external.sh --build --dir ${TEST} --tag ${dockerImageTag} --version ${JDK_VERSION} --impl ${JDK_IMPL} --platform ${env.SPEC} --docker_args ${extra_docker_args} " />
		<exec executable="bash" failonerror="true">
			<arg value="${DEST_EXTERNAL}/external.sh"/>
			<arg value="--build"/>
			<arg value="--dir"/>
			<arg value="${TEST}"/>
			<arg value="--tag"/>
			<arg value="${dockerImageTag}"/>
			<arg value="--version"/>
			<arg value="${JDK_VERSION}"/>
			<arg value="--impl"/>
			<arg value="${JDK_IMPL}"/>
			<arg value="--platform"/>
			<arg value="${env.SPEC}"/>
			<arg value="--docker_args"/>
			<arg value="${extra_docker_args}"/>
		</exec>
	</target>
</project>
