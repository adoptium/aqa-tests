<?xml version='1.0' encoding='UTF-8'?>
<playlist xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../TKG/resources/playlist.xsd">
	<include>../system.mk</include>
	<!--
	We currently only run special.system in parallel mode and some subfolders do not have any system test in special level
	In order to save machine resources, exclude modularity subfolder in parallel mode
	To enable it, please update excludes array in JenkinsfileBase
	-->
	<!-- 
	Special target to get machine information. This target is in each subfolder playlist.xml.
	To avoid test target duplication, this belongs to sanity, extended and special. Regular test should only belong to one level -->
	<test>
		<testCaseName>MachineInfo</testCaseName>
		<command>$(JAVA_COMMAND) -cp $(JVM_TEST_ROOT)$(D)TKG$(D)bin$(D)TestKitGen.jar org.openj9.envInfo.EnvDetector MachineInfo; \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
			<level>extended</level>
			<level>special</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<!-- Tests below pertain to Java 9 Modularity -->
	<test>
		<testCaseName>CpMp_CpMp</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=CpMpTest -test-args=$(Q)variant=CpMp$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>CpMp_MP</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=CpMpTest -test-args=$(Q)variant=Mp$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>CpMp2</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=CpMpTest2; \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>CpMp3</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=CpMpTest3; \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>CpMpModJar</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=CpMpModJar; \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>CpMpModJar2</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=CpMpModJar2; \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>CpMpModJar3</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=CpMpModJar3; \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>InternalAPIs</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=InternalAPIs; \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>AutoMod1</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=AutoModTest -test-args=$(Q)variant=AutoMod1$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>AutoMod2</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=AutoModTest -test-args=$(Q)variant=AutoMod2$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>AutoMod_Impl1</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=AutoModTest -test-args=$(Q)variant=Impl1$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>AutoMod_Impl2</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=AutoModTest -test-args=$(Q)variant=Impl2$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>AutoMod_Impl3</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=AutoModTest -test-args=$(Q)variant=Impl3$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<!-- Temporarily excluded due to : https://github.com/adoptium/aqa-systemtest/issues/200 -->
	<test>
		<testCaseName>ExplMod</testCaseName>
		<disables>
			<disable>
				<comment>https://github.com/adoptium/aqa-systemtest/issues/200</comment>
			</disable>
		</disables>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=ExplMod; \
	$(TEST_STATUS)</command>
		<versions>
			<version>9</version>
			<version>11+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<!-- Temporarily excluding from z/OS due to : jdk11-zos/issues/568 -->
	<test>
		<testCaseName>SLTest</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=SLTest; \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
		<platformRequirements>^os.zos</platformRequirements>
	</test>
	<test>
		<testCaseName>PatMod_PlatMod</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=PatModTest -test-args=$(Q)variant=PlatMod$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>PatMod_AppMod</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=PatModTest -test-args=$(Q)variant=AppMod$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>PatMod_Unex</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=PatModTest -test-args=$(Q)variant=Unex$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>PatMod_Adv</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=PatModTest -test-args=$(Q)variant=Adv$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>

	<!-- Temporarily excluding from z/OS due to : jdk11-zos/issues/568 -->
	<test>
		<testCaseName>PatModImg_PlatMod</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=PatModImgTest -test-args=$(Q)variant=PlatMod$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
		<platformRequirements>^os.zos</platformRequirements>
	</test>
	<!-- Temporarily excluding from z/OS due to : jdk11-zos/issues/568 -->
	<test>
		<testCaseName>PatModImg_AppMod</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=PatModImgTest -test-args=$(Q)variant=AppMod$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
		<platformRequirements>^os.zos</platformRequirements>
	</test>
	<!-- Temporarily excluding from z/OS due to : jdk11-zos/issues/568 -->
	<test>
		<testCaseName>PatModImg_Unex</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=PatModImgTest -test-args=$(Q)variant=Unex$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
		<platformRequirements>^os.zos</platformRequirements>
	</test>
	<!-- Temporarily excluding from z/OS due to : jdk11-zos/issues/568 -->
	<test>
		<testCaseName>PatModImg_Adv</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=PatModImgTest -test-args=$(Q)variant=Adv$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
		<platformRequirements>^os.zos</platformRequirements>
	</test>
	<test>
		<testCaseName>UpgModPath_Exp</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=UpgModPathTest -test-args=$(Q)variant=Exp$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<!-- Temporarily excluding from z/OS due to : jdk11-zos/issues/568 -->
	<test>
		<testCaseName>UpgModPath_ExpImg</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=UpgModPathTest -test-args=$(Q)variant=ExpImg$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
		<platformRequirements>^os.zos</platformRequirements>
	</test>
	<test>
		<testCaseName>UpgModPath_Jar</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=UpgModPathTest -test-args=$(Q)variant=Jar$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<!-- Temporarily excluding from z/OS due to : jdk11-zos/issues/568 -->
	<test>
		<testCaseName>UpgModPath_JarImg</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=UpgModPathTest -test-args=$(Q)variant=JarImg$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
		<platformRequirements>^os.zos</platformRequirements>
	</test>
	<!-- Temporarily excluded from win due to : https://github.com/eclipse-openj9/openj9-systemtest/issues/68 -->
	<!-- Temporarily excluding from z/OS due to : jdk11-zos/issues/568 -->
	<test>
		<testCaseName>Jlink_ReqMod</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=JlinkTest -test-args=$(Q)variant=ReqdMod$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
		<platformRequirements>^os.win,^os.zos</platformRequirements>
	</test>
	<!-- Temporarily excluded from win due to : https://github.com/eclipse-openj9/openj9-systemtest/issues/68 -->
	<!-- Temporarily excluding from z/OS due to : jdk11-zos/issues/568 -->
	<test>
		<testCaseName>Jlink_AddMLimitM</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=JlinkTest -test-args=$(Q)variant=AddMLimitM$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
		<platformRequirements>^os.win,^os.zos</platformRequirements>
	</test>
	<!-- Temporarily excluding from z/OS due to : jdk11-zos/issues/568 -->
	<test>
		<testCaseName>CpMpJlink</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=CpMpJlinkTest; \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
		<platformRequirements>^os.zos</platformRequirements>
	</test>
	<!-- Temporarily excluded from win due to : https://github.com/eclipse-openj9/openj9-systemtest/issues/68 -->
	<test>
		<testCaseName>Jlink_GenOpt</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=JlinkPluginTest -test-args=$(Q)variant=GenOpt$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
		<platformRequirements>^os.win</platformRequirements>
	</test>
	<test>
		<testCaseName>LayersTest</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=LayersTest -test-args=$(Q)heapsize=10m$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
		<impls>
			<impl>openj9</impl>
			<impl>ibm</impl>
		</impls>
	</test>
	<test>
		<testCaseName>CLTest</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=CLTest -test-args=$(Q)variant=CLTest$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<!-- Temporarily excluding from z/OS due to : jdk11-zos/issues/568 -->
	<test>
		<testCaseName>CLTestImg</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=CLTestImage -test-args=$(Q)variant=Img$(Q); \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
		<platformRequirements>^os.zos</platformRequirements>
	</test>
	<test>
		<testCaseName>CLLoad</testCaseName>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=CLLoadTest; \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>CLStressLayers</testCaseName>
		<disables>
			<disable>
				<comment>https://github.com/adoptium/aqa-systemtest/issues/197</comment>
			</disable>
		</disables>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=CLStressLayers; \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
	<test>
		<testCaseName>CLStressCRI</testCaseName>
		<disables>
			<disable>
				<comment>https://github.com/adoptium/aqa-systemtest/issues/197</comment>
			</disable>
		</disables>
		<variations>
			<variation>Mode150</variation>
			<variation>Mode650</variation>
			<variation>Mode1000</variation>
		</variations>
		<command>$(SYSTEMTEST_CMD_TEMPLATE) -test=CLStressCRI; \
	$(TEST_STATUS)</command>
		<versions>
			<version>9+</version>
		</versions>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>system</group>
		</groups>
	</test>
</playlist>
