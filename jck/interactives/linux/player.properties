#
#   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License").
#   You may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

# Defines where the test suite we run is located
arctic.common.repository.json.path = ../arctic_tests

# Name we used to save the test definition.
arctic.common.repository.json.file = Test.json

# Defines the scope mode. Currently, there are four modes supported:
# single: Arctic will read tests only from the scope it is running
# default: Like single, but it will additionally fall back to load tests from the default scope
# incremental: Treat scopes as numbers (default being 0), and check the highest, limited by the current scope
# custom: Load scopes directly from a configuration key `arctic.common.repository.scope.custom.<SCOPE>`
arctic.common.repository.scope.mode = default

# Defines the default scope. This value should not be changed here, but override by the arctic.scope system property.
arctic.common.repository.scope = ${sys:arctic.scope:-default}

# Store tests using double \\ instead of / in the json files
arctic.common.repository.windows.legacy.mode = false

# Enable the Arctic command line interface
arctic.common.cmd.enabled = true

# Allow arctic to receive commands directly via console
arctic.common.cmd.console.enabled = false

# Disable all commands except for those specifically stated by the arctic.common.cmd.allowed list.
arctic.common.cmd.allowed.enabled = false

# List of commands to allow
arctic.common.cmd.allowed = *

# Disable all commands listed in the arctic.common.cmd.disallowed list.
arctic.common.cmd.disallowed.enabled = false

# Disable specific commands from the arctic command line. Blocking a first level command will block all subsequent
# subcommands, blocking "test" will also block "test run" and "test reset". To block only a subset, use "_" as a
# separator. An example would be to block only "test_run" allowing "test reset". This can be used with the
# arctic.common.cmd.allowed to allow a first level command and then disallow one or more second level ones.
arctic.common.cmd.disallowed =

# Apply a filter based on a regular expression
arctic.common.cmd.regex.enabled = false

# A regular expression that will be applied to the commands to determine whether they are allowed or not, a way to
# further fine-tune the allowed list command.
arctic.common.cmd.regex = .*

# Allow receiving commands via RMI. There are three valid values here:
# true: All RMI connections are allowed
# local_only: Bind the RMI server only to the loopback IP
# false: RMI connections are not allowed
arctic.common.cmd.rmi.enabled = local_only

# Name for the RMI commands listener
arctic.common.cmd.rmi.name = ArcticCmd

# Port for the RMI commands listener
arctic.common.cmd.rmi.port = 61099

# Name of the default session
arctic.common.session.default = arctic.session

# A margin of how close to the edge of the screen we can get with the workbench. If the workbench has an x coordinate
# value lower than the margin, when taking the screenshot, the position is assumed to be 0. This is useful because it
# allows us to capture things like the menubar on mac that doesn't allow us to position windows behind
arctic.common.screen.capture.margin.x = 0
arctic.common.screen.capture.margin.y = 0

# Confirmation mode means arctic will wait for the finishedTest signal before running that test post-processing pipeline
# instead of doing it after finished replaying events. In confirmation mode, non-confirmed tests are considered as not
# passed.
arctic.player.confirmation.mode = false

# In playback mode, the backend will reproduce the full set of events, even if a failed check is found.
arctic.player.fast.mode = false

# Defines which engines will process the events of the recording. Possible values are:
# awtMouse: Reproduce mouse movement/click using AWT Robot
# jnhMouse: Reproduce mouse movement/click using jNativeHook
# awtKeyboard: Reproduce key input using AWT Robot
# jnhKeyboard: Reproduce key input using jNativeHook
# jnhMouseWheel: Reproduce mouse wheel using jNativeHook
# sc: Reproduce image checks
arctic.player.backend.players = awtMouse, awtKeyboard, jnhMouseWheel, sc

# Defines equivalences between jnh recordings and awt mouse masks. The value here represents how many bits need to
# be shifted
# See: java.awt.event.InputEvent
arctic.player.backend.awtMouse.button1 = 10
arctic.player.backend.awtMouse.button2 = 11
arctic.player.backend.awtMouse.button3 = 12

# A filter of events to reproduce on the awtMouse backend player. This can be used to get finer control of events that
# this player will reproduce if there is another mouse backend player
arctic.player.backend.awtMouse.events = 0x03600

# A filter of events to reproduce on the jnhMouse backend player. This can be used to get finer control of events that
# this player will reproduce if there is another mouse backend player
arctic.player.backend.jnhMouse.events = 0x03700

# Choose if the keymap translation for awtKeyboard should be read as a bundled resourced or an independent file on disk.
arctic.player.backend.awtKeyboard.keymap.bundled = true

# Bundled resource name or path to the file with the keymap.
# These files can be generated running `java -jar Arctic.jar -d`.
arctic.player.backend.awtKeyboard.keymap = keymap_linux.txt

# Define which image comparator to use when reproducing the tests
# Values can be:
#   pixel: Perform a pixel by pixel comparison of the image
#   hash: Compare the hash values of the images
arctic.player.backend.sc.comparator = pixel

arctic.player.backend.sc.pixel.checks = hash, recorded, dimension, strict, confidence, fuzzy, cluster

# For the pixel comparator, generate differences to disk
arctic.player.backend.sc.pixel.save = true

# For the debug image comparator, specifies the output directory for the diff images
arctic.player.backend.sc.pixel.save.folder = failures

# Arctic will delete all the failures from previous runs upon new startup
arctic.player.backend.sc.pixel.save.clear = false

# Format to use to save the images. Values are those supported by ImageIO.
arctic.player.backend.sc.pixel.save.format = png

# Extension to use when saving the images.
arctic.player.backend.sc.pixel.save.extension = .png

# Calculate hints and masks using a fast (but less accurate) approach
arctic.player.backend.sc.pixel.hint.fast = false

# Calculate masks in addition to hints
arctic.player.backend.sc.pixel.hint.mask = true

# Minimum % of pixels that need to be a perfect match
arctic.player.backend.sc.pixel.confidence.min = 0.85

# Check pixels that are hidden by shades
arctic.player.backend.sc.pixel.checkShades = false

# A margin around the shade that we will not check
arctic.player.backend.sc.pixel.shadeMargin = 3

# Defines the maximum deviation that can be detected in each of the RGB components of a pixel color
arctic.player.backend.sc.pixel.fuzzy.tolerance = 8

# Pass the test even if some pixels are not the same if no clusters are found. Cluster are defined as more failures than
# the limit in a 3x3 square or a 5x5 square centered on the failing pixel. A value of 1 in any of them guarantees any
# failure is considered a cluster.
arctic.player.backend.sc.pixel.cluster.9 = 2
arctic.player.backend.sc.pixel.cluster.25 = 4

# For performance reasons, limit the number of pixels to draw when doing the cluster calculation
arctic.player.backend.sc.pixel.cluster.max.draw = 10000

# Use the fuzzy check as source for cluster (chaining) instead of the strict check
arctic.player.backend.sc.pixel.cluster.source.fuzzy = false

# Which controller we want to use to regulate the timing.
# basic: A fairly simple controller that will try to match the speed at which the test was originally recorded.
# advanced: A more complex controller that supports minimal and maximum wait times to speed up reproduction.
arctic.player.time.controller = advanced

# Selects which preprocessors to run before replaying events. Order is pre-determined based on priority.
# cleanUp: Cleans the information stored from previous runs for that specific test.
# firstTestDelay: Adds an extra delay when we start a new test group.
# overrides: Allows to override certain values defined in the test with new values set in the player.
# testDelay: An individual delay to be added to each test case.
# scValidator: Uses the initial ScreenCheck to ensure we can recognize the test in the screen.
# eventsLoader: Loads the events from the Events.json file.
# truncations: Manipulates the list of events, so we ignore a certain set of mouse and keyboard events from the beginning
#   or end of the test. This is used to account for recording issues adding extra events.
# timeControl: Signals the timeController to start the clock for the replay.
arctic.player.pre.processors = cleanUp, firstTestDelay, overrides, testDelay, scValidator, eventsLoader, truncations, timeControl

# The first test on a test group can take significantly more than other tests to run. We have an extra wait timer for
# that case. Whenever we get a signal that a test group has finished, we will consider the next test to require the
# extra wait time.
# Value in milliseconds
arctic.player.pre.firstTestDelay.wait = 500

# Whether to override the individual values for timings stored on each set.
# The override can be used to reduce the timings, but not to increase them beyond the test default value
arctic.player.pre.overrides.timings = false

# How much time to wait before since we receive the notification that the test is on the screen until we start the
# reproduction. On slow systems, this gives them time to properly render the test. Low values can cause the test to
# be rendered after the attempt to give focus is done, effectively putting the workbench on top of the test.
# Value in milliseconds
# A negative number will cause this override not to be applied
arctic.player.pre.overrides.timings.start = -1

# How much time to wait before we capture the screen after positioning different windows. This is done to ensure there
# are no artifacts captured because the screen buffer is still rendering the image.
# Value in milliseconds
# A negative number will cause this override not to be applied
arctic.player.pre.overrides.timings.sc = -1

# This property sets the minimal amount of time to wait. A request to wait for less time will be ignored. This means
# there can be a small drift when reproducing events of up to this time.
# Value in nanoseconds
# A negative number will cause this override not to be applied
arctic.player.pre.overrides.timings.min = -1

# This property sets how much will the player wait at most before posting the next event. This is only applied if the
# arctic.player.time.wait.override property is set to true. A very low value will speed up the reproduction.
# Value in nanoseconds
# -2 -> Ignore this override
# -1 -> Wait as much time as needed
# 0 -> Don't wait
arctic.player.pre.overrides.timings.max = -2

# Unlock the option to override which events of the test will be sent to the backends. If set to false, the value
# of preferredPlayMode for each test is used.
arctic.player.pre.overrides.reproduction = false

# Defines a mask with the events that will be processed. The values are defined in ArcticEvent interface
# The final reproduction mode will be the result of an AND operation of this value and the stored one
arctic.player.pre.overrides.reproduction.mode = 0x10e06

# Whether to override the truncate values. Truncation removes keyboard and mouse events from the tests.
arctic.player.pre.overrides.truncations = false

# Remove this number of events from the beginning of the list of mouse events to reproduce.
arctic.player.pre.overrides.truncations.mouse.start = -1

# Remove this number of events from the end of the list of mouse events to reproduce.
arctic.player.pre.overrides.truncations.mouse.end = -1

# Remove this number of events from the beginning of the list of mouse events to reproduce.
arctic.player.pre.overrides.truncations.kb.start = -1

# Remove this number of events from the end of the list of keyboard events to reproduce.
arctic.player.pre.overrides.truncations.kb.end = -1

# Apply new offsets for the mouse
arctic.player.pre.overrides.mouse.offsets = false

# Value for the new x and y offsets for the mouse.
arctic.player.pre.overrides.mouse.offsets.x = 0
arctic.player.pre.overrides.mouse.offsets.y = 0

# There is a race condition between arctic pushing the workbench to the back and clicking on the test to gain focus. If
# not properly timed, the click will hit the workbench before the test
# Value in milliseconds
arctic.player.pre.scValidator.wait.focus = 500

# Bypass the scValidator check. That will allow the test to continue even if the initial check fails. This will not
# cause the test to be failed if every other check passes
arctic.player.pre.scValidator.bypass = false

# Selects which preprocessors to run before after replaying events. Order is pre-determined based on priority.
# resultsUpdater: save the results of the tests
# autoUpdater: for confirmed tests, saves the overrides as the new default for the test
# migrator: to migrate tests to a new platform
arctic.player.post.processors = resultsUpdater, autoUpdater, migrator

# In confirmation mode, automatically update the overrides as the new default
arctic.player.post.auto.updater.save = false

# Migrate the test, which will replace all screenshots with the current one and clean
# all the alternatives. This can be done to migrate tests between different platforms
# if they are close enough
arctic.player.post.migrate = false

# Define which image comparator to use to identify the test on screen
# Values can be:
#   pixel: Perform a pixel by pixel comparison of the image
#   hash: Compare the hash values of the images
#   debug: Performs a hash comparison, in case of failure, a diff image is generated
arctic.player.matcher.sc = hash

# When doing review, show first the alternative with fewer failures based on this pixel check comparator
arctic.player.gui.review.order = fuzzy

# Which manager we use to give focus to the first test we run
# awt: Attempt to give focus using awt to click in the window
# dummy: do nothing
arctic.common.backend.focus.manager = awt

arctic.common.gui.wb.default.title = "Workbench"
arctic.common.arctic.gui.wb.default.color = 0xE6F0FA
arctic.common.arctic.gui.wb.default.width = 800
arctic.common.arctic.gui.wb.default.height = 600

arctic.common.gui.shade.default.title = "Shade"
arctic.common.gui.shade.default.color = 0xF2FFE6
arctic.common.gui.shade.default.width = 250
arctic.common.gui.shade.default.height = 50