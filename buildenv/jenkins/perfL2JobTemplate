#!groovy

/*
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

/**
 * A template that defines a L2 perf job.
 */
if (!binding.hasVariable('BENCHMARK')) BENCHMARK = "dacapo"
if (!binding.hasVariable('TEST_SDK_RESOURCE')) TEST_SDK_RESOURCE = "nightly"
if (!binding.hasVariable('TEST_SDK_URL')) TEST_SDK_URL = ""
if (!binding.hasVariable('BASELINE_SDK_RESOURCE')) BASELINE_SDK_RESOURCE = "releases"
if (!binding.hasVariable('BASELINE_SDK_URL')) BASELINE_SDK_URL = ""
if (!binding.hasVariable('PLATFORM')) PLATFORM = ['x86-64_linux']
if (!binding.hasVariable('JDK_IMPL')) JDK_IMPL = "hotspot"
if (!binding.hasVariable('JDK_VERSION')) JDK_VERSION = 21
if (!binding.hasVariable('GENERATE_JOBS')) GENERATE_JOBS = false

if (!binding.hasVariable('BUILDS_TO_KEEP')) {
	BUILDS_TO_KEEP = 100
} else {
	BUILDS_TO_KEEP = BUILDS_TO_KEEP.toInteger()
}

if (!binding.hasVariable('DAYS_TO_KEEP')) {
	DAYS_TO_KEEP = 100
} else {
	DAYS_TO_KEEP = DAYS_TO_KEEP.toInteger()
}

println "JDK_VERSION: ${JDK_VERSION}"
println "PLATFORM: ${PLATFORM}"

def ADOPTOPENJDK_REPO = "https://github.com/adoptium/aqa-tests.git"
def ADOPTOPENJDK_BRANCH = "master"

// https://issues.jenkins.io/browse/JENKINS-42971 is resolved, but it seems to be a partial fix for Branch Specifier parameter.
// Repository URL still has problem with lightweight checkout
// Set Repository URL and Branch Specifier as build parameters by default
// If LIGHT_WEIGHT_CHECKOUT is set to true, set Repository URL to its explicit value and keep Branch Specifier as parameter
def ADOPTOPENJDK_REPO_BUILD_PARAM = '${ADOPTOPENJDK_REPO}'
def ADOPTOPENJDK_BRANCH_BUILD_PARAM = '${ADOPTOPENJDK_BRANCH}'
def SCRIPT_PATH = "aqa-tests/buildenv/jenkins/perfPipeline.groovy"

def ACTUAL_TEST_JOB_NAME = TEST_JOB_NAME
pipelineJob("$ACTUAL_TEST_JOB_NAME") {
        description('<h1>THIS IS AN AUTOMATICALLY GENERATED JOB. PLEASE DO NOT MODIFY, IT WILL BE OVERWRITTEN.</h1><br><p>This job is defined in <a href="https://github.com/adoptium/aqa-tests/blob/master/buildenv/jenkins/perfL2JobTemplate" target="_blank">perfL2JobTemplate</a> in the https://github.com/adoptium/aqa-tests repo. If you wish to change the job, please modify perfL2JobTemplate script. </p><p>For more information about job parameters, please refer <a href="https://github.com/adoptium/aqa-tests/wiki/How-to-Run-a-Grinder-Build-on-Jenkins" target="_blank">How to Run a Grinder Build on Jenkins</a></p>wiki:<p><a href="https://github.com/eclipse-openj9/openj9/wiki/AQA-Lightning-Talk-Series" target="_blank">AQA Lightning Talk Series</a></p><p><a href="https://github.com/eclipse-openj9/openj9/wiki/Reproducing-Test-Failures-Locally" target="_blank">Reproducing Test Failures Locally</a></p>')
        properties {
                copyArtifactPermission {
                        projectNames('*')
                }
        }
        definition {
                parameters {
                        stringParam('ADOPTOPENJDK_REPO', ADOPTOPENJDK_REPO, "AdoptOpenJDK git repo. Please use ssh for zos.")
                        stringParam('ADOPTOPENJDK_BRANCH', ADOPTOPENJDK_BRANCH, "AdoptOpenJDK branch")
                        stringParam('PLATFORM', PLATFORM, '''Platform to be tested:
                        <br/>arm_linux
                        <br/>aarch64_linux
                        <br/>ppc64_aix
                        <br/>ppc64le_linux
                        <br/>s390x_linux
                        <br/>x86-64_linux
                        <br/>x86-64_mac
                        <br/>x86-64_windows
                        <br/>x86-32_windows
                        <br/>sparcv9_solaris
                        <br/>riscv64_linux
                        <br/>multiple platforms (comma separated values): x86-64_linux,x86-64_mac
                        <br/>Please refer to PLATFORM_MAP in https://github.com/adoptium/aqa-tests/blob/master/buildenv/jenkins/openjdk_tests<br/>''')
                        stringParam('BENCHMARK', BENCHMARK, "dacapo")
                        stringParam('JDK_VERSION', "${JDK_VERSION}", "JDK version. i.e., 8, 11")
                        stringParam('TEST_SDK_RESOURCE', TEST_SDK_RESOURCE, '''Where to get sdk? nightly|releases|customized|upstream<br/>
                        nightly & releases pull the lastest from AdoptOpenJDK <br/>
                        If nightly / releases is selected, please provide JDK_VERSION and JDK_IMPL <br/>
                        If customized is selected, please provide CUSTOMIZED_SDK_URL <br/>
                        If upstream is selected, please provide UPSTREAM_JOB_NAME and UPSTREAM_JOB_NUMBER <br/>''')
                        stringParam('TEST_SDK_URL', TEST_SDK_URL, "")
                        stringParam('BASELINE_SDK_RESOURCE', BASELINE_SDK_RESOURCE, '''Where to get sdk? nightly|releases|customized|upstream<br/>
                        nightly & releases pull the lastest from AdoptOpenJDK <br/>
                        If nightly / releases is selected, please provide JDK_VERSION and JDK_IMPL <br/>
                        If customized is selected, please provide CUSTOMIZED_SDK_URL <br/>
                        If upstream is selected, please provide UPSTREAM_JOB_NAME and UPSTREAM_JOB_NUMBER <br/>''')
                        stringParam('BASELINE_SDK_URL', BASELINE_SDK_URL, "")
                        stringParam('JDK_IMPL', JDK_IMPL, "hotspot")
                        stringParam('GENERATE_JOBS', GENERATE_JOBS, '''If GENERATE_JOBS is set to false (default), 
                        only generate the job if the job is not runnable. If GENERATE_JOBS is set to true, generate the job regardless.''')
                }
                cpsScm {
                        scm {
                                git {
                                        remote {
                                                url(ADOPTOPENJDK_REPO_BUILD_PARAM)
                                        }
                                        branch(ADOPTOPENJDK_BRANCH_BUILD_PARAM)
                                        extensions {
                                                relativeTargetDirectory('aqa-tests')
                                                cleanBeforeCheckout()
                                                pruneStaleBranch()
                                                wipeOutWorkspace()
                                                cloneOptions {
                                                        depth(1)
                                                        shallow(true)
                                                        timeout(60)
                                                }
                                        }
                                }
                                scriptPath(SCRIPT_PATH)
                        }
                }
                logRotator {
                        numToKeep(BUILDS_TO_KEEP)
                        artifactNumToKeep(BUILDS_TO_KEEP)
                        daysToKeep(DAYS_TO_KEEP)
                        artifactDaysToKeep(DAYS_TO_KEEP)
                }
        }
}

